
import Head from "next/head";

import { useEffect, useRef, useState } from "react";

import Header from "@/components/Header";

import Footer from "@/components/Footer";

import HabitLoop from "@/components/HabitLoop";

import RepCounter from "@/components/RepCounter";



export default function Grow() {

┬а const canvasRef = useRef<HTMLCanvasElement | null>(null);

┬а const [repCount, setRepCount] = useState(0);



┬а useEffect(() => {

┬а ┬а const canvas = canvasRef.current;

┬а ┬а if (!canvas) return;

┬а ┬а const ctx = canvas.getContext("2d");

┬а ┬а if (!ctx) return;



┬а ┬а const width = (canvas.width = canvas.offsetWidth);

┬а ┬а const height = (canvas.height = canvas.offsetHeight);



┬а ┬а const ivyColor = "#8affc1";

┬а ┬а const magicGlow = "rgba(131, 255, 184, 0.4)";



┬а ┬а let branches: {

┬а ┬а ┬а x: number;

┬а ┬а ┬а y: number;

┬а ┬а ┬а angle: number;

┬а ┬а ┬а depth: number;

┬а ┬а ┬а width: number;

┬а ┬а }[] = [];

┬а ┬а let animationFrame: number;

┬а ┬а let currentIndex = 0;



┬а ┬а const drawLeaf = (x: number, y: number) => {

┬а ┬а ┬а ctx.beginPath();

┬а ┬а ┬а ctx.fillStyle = "rgba(144, 255, 203, 0.6)";

┬а ┬а ┬а ctx.arc(x, y, 4, 0, 2 * Math.PI);

┬а ┬а ┬а ctx.fill();

┬а ┬а };



┬а ┬а const drawIvy = (x: number, y: number, angle: number) => {

┬а ┬а ┬а ctx.beginPath();

┬а ┬а ┬а ctx.strokeStyle = "rgba(104, 255, 185, 0.3)";

┬а ┬а ┬а ctx.lineWidth = 1.2;

┬а ┬а ┬а ctx.moveTo(x, y);

┬а ┬а ┬а ctx.lineTo(x + Math.cos(angle + 1) * 8, y - Math.sin(angle + 1) * 8);

┬а ┬а ┬а ctx.stroke();

┬а ┬а };



┬а ┬а const drawFruit = (x: number, y: number) => {

┬а ┬а ┬а ctx.beginPath();

┬а ┬а ┬а ctx.fillStyle = "rgba(255, 210, 120, 0.8)";

┬а ┬а ┬а ctx.shadowColor = "#ffe6b3";

┬а ┬а ┬а ctx.shadowBlur = 12;

┬а ┬а ┬а ctx.arc(x, y, 5, 0, 2 * Math.PI);

┬а ┬а ┬а ctx.fill();

┬а ┬а };



┬а ┬а const drawBranch = (

┬а ┬а ┬а x: number,

┬а ┬а ┬а y: number,

┬а ┬а ┬а angle: number,

┬а ┬а ┬а depth: number,

┬а ┬а ┬а width: number

┬а ┬а ) => {

┬а ┬а ┬а if (depth === 0) return;

┬а ┬а ┬а const x2 = x + Math.cos(angle) * depth * 10;

┬а ┬а ┬а const y2 = y - Math.sin(angle) * depth * 10;



┬а ┬а ┬а ctx.beginPath();

┬а ┬а ┬а ctx.strokeStyle = ivyColor;

┬а ┬а ┬а ctx.lineWidth = width;

┬а ┬а ┬а ctx.shadowBlur = 15;

┬а ┬а ┬а ctx.shadowColor = magicGlow;

┬а ┬а ┬а ctx.moveTo(x, y);

┬а ┬а ┬а ctx.lineTo(x2, y2);

┬а ┬а ┬а ctx.stroke();



┬а ┬а ┬а // Growth effects based on rep count

┬а ┬а ┬а if (repCount >= 10) drawLeaf(x2, y2);

┬а ┬а ┬а if (repCount >= 25) drawIvy(x2, y2, angle);

┬а ┬а ┬а if (repCount >= 50 && Math.random() > 0.95) drawFruit(x2, y2);



┬а ┬а ┬а branches.push({

┬а ┬а ┬а ┬а x: x2,

┬а ┬а ┬а ┬а y: y2,

┬а ┬а ┬а ┬а angle: angle - 0.3,

┬а ┬а ┬а ┬а depth: depth - 1,

┬а ┬а ┬а ┬а width: width * 0.7,

┬а ┬а ┬а });

┬а ┬а ┬а branches.push({

┬а ┬а ┬а ┬а x: x2,

┬а ┬а ┬а ┬а y: y2,

┬а ┬а ┬а ┬а angle: angle + 0.3,

┬а ┬а ┬а ┬а depth: depth - 1,

┬а ┬а ┬а ┬а width: width * 0.7,

┬а ┬а ┬а });

┬а ┬а };



┬а ┬а const animate = () => {

┬а ┬а ┬а if (currentIndex < branches.length) {

┬а ┬а ┬а ┬а const { x, y, angle, depth, width } = branches[currentIndex];

┬а ┬а ┬а ┬а drawBranch(x, y, angle, depth, width);

┬а ┬а ┬а ┬а currentIndex++;

┬а ┬а ┬а ┬а animationFrame = requestAnimationFrame(animate);

┬а ┬а ┬а }

┬а ┬а };



┬а ┬а const startDrawing = () => {

┬а ┬а ┬а ctx.clearRect(0, 0, width, height);

┬а ┬а ┬а branches = [];

┬а ┬а ┬а currentIndex = 0;



┬а ┬а ┬а drawBranch(width / 2, height, Math.PI / 2, 8, 8);

┬а ┬а ┬а animationFrame = requestAnimationFrame(animate);

┬а ┬а };



┬а ┬а startDrawing();



┬а ┬а return () => cancelAnimationFrame(animationFrame);

┬а }, [repCount]);



┬а return (

┬а ┬а <>

┬а ┬а ┬а <Head>

┬а ┬а ┬а ┬а <title>Myelin Map * Grow ­Ъї▒</title>

┬а ┬а ┬а ┬а <meta

┬а ┬а ┬а ┬а ┬а name="description"

┬а ┬а ┬а ┬а ┬а content="Train your brain and watch your myelin tree grow with every rep."

┬а ┬а ┬а ┬а />

┬а ┬а ┬а </Head>



┬а ┬а ┬а <Header

┬а ┬а ┬а ┬а title="Grow Your Mind ­Ъї│"

┬а ┬а ┬а ┬а subtitle="Train with reps. Visualize your progress."

┬а ┬а ┬а />



┬а ┬а ┬а <main className="flex flex-col items-center justify-start px-4 py-16 min-h-[calc(100vh-200px)] bg-gray-900 text-white">

┬а ┬а ┬а ┬а {/* ­Ъї│ Animated Tree at Top */}

┬а ┬а ┬а ┬а <div className="relative w-full max-w-4xl h-[500px] mb-16 rounded-2xl overflow-hidden shadow-2xl bg-black">

┬а ┬а ┬а ┬а ┬а <canvas ref={canvasRef} className="w-full h-full" />

┬а ┬а ┬а ┬а </div>



┬а ┬а ┬а ┬а {/* ­ЪДа Headline & Intro */}

┬а ┬а ┬а ┬а <h1 className="text-4xl md:text-5xl font-bold mb-6 text-center">

┬а ┬а ┬а ┬а ┬а ­ЪДа Rewire with Action

┬а ┬а ┬а ┬а </h1>

┬а ┬а ┬а ┬а <p className="text-lg max-w-2xl mb-10 text-gray-300 text-center">

┬а ┬а ┬а ┬а ┬а One click. One rep. One branch at a time. This is how myelin grows.

┬а ┬а ┬а ┬а </p>



┬а ┬а ┬а ┬а {/* ­ЪћЂ Habit Components */}

┬а ┬а ┬а ┬а <div className="w-full max-w-2xl space-y-8 mb-16">

┬а ┬а ┬а ┬а ┬а <HabitLoop />

┬а ┬а ┬а ┬а ┬а <RepCounter count={repCount} onRep={() => setRepCount(repCount + 1)} />

┬а ┬а ┬а ┬а </div>



┬а ┬а ┬а ┬а {/* ­Ъїї Educational Section */}

┬а ┬а ┬а ┬а <section className="max-w-3xl space-y-6 text-center text-slate-200">

┬а ┬а ┬а ┬а ┬а <p>

┬а ┬а ┬а ┬а ┬а ┬а Every time you log a rep, your mystical Tree of Life grows stronger

┬а ┬а ┬а ┬а ┬а ┬а &mdash; more branches, more light, more magic.

┬а ┬а ┬а ┬а ┬а </p>



┬а ┬а ┬а ┬а ┬а <h2 className="text-2xl font-semibold text-white">

┬а ┬а ┬а ┬а ┬а ┬а This Is Only the Beginning

┬а ┬а ┬а ┬а ┬а </h2>

┬а ┬а ┬а ┬а ┬а <p>

┬а ┬а ┬а ┬а ┬а ┬а The tree will evolve with you. In the future, you&rsquo;ll see circuits

┬а ┬а ┬а ┬а ┬а ┬а form, energy pulse through, and the shape of your discipline come alive.

┬а ┬а ┬а ┬а ┬а </p>



┬а ┬а ┬а ┬а ┬а <h2 className="text-2xl font-semibold text-white">

┬а ┬а ┬а ┬а ┬а ┬а Built on Science. Fueled by You.

┬а ┬а ┬а ┬а ┬а </h2>

┬а ┬а ┬а ┬а ┬а <p>

┬а ┬а ┬а ┬а ┬а ┬а This isn&rsquo;t fantasy &mdash; it&rsquo;s neuroscience. Repetition

┬а ┬а ┬а ┬а ┬а ┬а wires your brain. The visualizer just lets you witness it.

┬а ┬а ┬а ┬а ┬а </p>

┬а ┬а ┬а ┬а </section>

┬а ┬а ┬а </main>



┬а ┬а ┬а <Footer />

┬а ┬а </>

┬а );

}